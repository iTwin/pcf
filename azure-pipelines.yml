trigger:
  branches:
    include:
      - main
      - release/*
  paths:
    exclude:
      - docs/*
      - README.md
      - LICENSE

pr:
  drafts: false
  branches:
    include:
      - main
      - release/*
  paths:
    exclude:
      - docs/*
      - README.md
      - LICENSE

resources:
  repositories:
    - repository: build-pipeline-scripts
      type: git
      ref: master
      name: iModelTechnologies/imodeljs-build-pipeline-scripts

stages:
- stage: Build
  displayName: Build
  jobs:
    - job: BuildPCFPackages

      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-latest'
          # mac:
            # imageName: 'macos-latest'
          windows:
            imageName: 'windows-latest'

      pool:
        vmImage: $(imageName)

      steps:

      - checkout: self
        persistCredentials: true
        clean: true

      - task: NodeTool@0
        inputs:
          versionSpec: '12.17.0'
        displayName: 'Install Node.js'

      # @itwin/pcf build

      - script: |
          npm ci
        displayName: 'npm ci'
        workingDirectory: core

      - script: |
           npm run build
        displayName: 'npm run build'
        workingDirectory: core

      - script: |
          npm run test:unit
        displayName: 'npm run test:unit'
        workingDirectory: core

      - script: |
          npm run test:integration
        displayName: 'npm run test:integration'
        workingDirectory: core
        env:
          imjs_test_project_id: $(test_project_id)
          imjs_test_imodel_id: $(test_imodel_id)
          imjs_test_client_id: $(test_client_id)
          imjs_test_redirect_uri: $(test_redirect_uri)
          imjs_test_regular_user_name: $(test_user_name)
          imjs_test_regular_user_password: $(test_user_password)

      - bash: |
          cp ../README.md .
          cp ../LICENSE .
          npm pack
        displayName: 'npm pack'
        workingDirectory: core

      - task: CopyFiles@2
        inputs:
          sourceFolder: core
          contents: '*.tgz'
          targetFolder: $(Build.ArtifactStagingDirectory)/core
        displayName: 'Copy @itwin/pcf'

      # @itwin/pcf-cli build

      - script: |
          npm ci
        displayName: 'npm ci'
        workingDirectory: cli

      - script: |
          npm link
        displayName: 'npm link'
        workingDirectory: cli

      - bash: |
          cp ../LICENSE .
          npm pack
        displayName: 'npm pack'
        workingDirectory: cli

      - task: CopyFiles@2
        inputs:
          sourceFolder: cli
          contents: '*.tgz'
          targetFolder: $(Build.ArtifactStagingDirectory)/cli
        displayName: 'Copy @itwin/pcf-cli'

      # TestConnector build

      - script: |
          pcf init TestProject TestConnector TestClientId TestClientRedirectUri TestClientScope TestProjectId TestIModelId
        displayName: 'pcf init'
        workingDirectory: cli

      - bash: |
          # npm installing a local modules does not automatically install its dependencies
          npm install ../../core
          npm install ../../core/node_modules/@itwin/core-backend
          npm install ../../core/node_modules/@itwin/ecschema-metadata
        displayName: 'Link local dependencies'
        workingDirectory: cli/TestProject

      - script: |
          npm run build
        displayName: 'Build Generated Connector'
        workingDirectory: cli/TestProject

      # publish artifact

      - bash: |
          coreVer=$(node -p "require('./core/package.json').version")
          coreName=$(node -p "require('./core/package.json').name")
          cliVer=$(node -p "require('./cli/package.json').version")
          cliName=$(node -p "require('./cli/package.json').name")

          checkVer() {
            localVer=$1
            name=$2

            remoteVer=$(npm view $name version)
            if [ -z "$remoteVer" ]; then
              remoteVer=0.0.0
            fi

            olderVer=$(printf '%s\n' "$localVer" "$remoteVer" | sort -V | head -n1)
            if [ "$localVer" != "$remoteVer" ] && [ "$remoteVer" = "$olderVer" ]; then
              echo true
            else
              echo false
            fi
          }

          updateCore=$(checkVer $coreVer $coreName)
          updateCli=$(checkVer $cliVer $cliName)

          if [ "$updateCore" = "true" ] && [ "$updateCore" = "$updateCli" ] && [ "$coreVer" = "$cliVer" ]; then
            echo "package publishing conditions are met."
            shouldPublish=true
          else
            echo "package publishing conditions not met."
            shouldPublish=false
          fi

          echo "##vso[task.setvariable variable=shouldPublish;isOutput=true]$shouldPublish"
          echo "##vso[task.setvariable variable=coreVer;isOutput=true]$coreVer"
          echo "##vso[task.setvariable variable=coreName;isOutput=true]$coreName"
          echo "##vso[task.setvariable variable=cliVer;isOutput=true]$cliVer"
          echo "##vso[task.setvariable variable=cliName;isOutput=true]$cliName"

        displayName: 'Store Build Info'
        name: info
        condition: and(succeeded(), eq(variables.try_publish, true), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Agent.OS'], 'Linux'))

      - bash: |
          echo "shouldPublish: $(info.shouldPublish)"
          echo "coreVer: $(info.coreVer)"
          echo "coreName: $(info.coreName)"
          echo "cliVer: $(info.cliVer)"
          echo "cliName: $(info.cliName)"
          ls
          ls cli
          ls core
        displayName: 'Show Build Info'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/core'
          artifactName: core
        displayName: 'Publish PCF Core Artifact'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/cli'
          artifactName: cli
        displayName: 'Publish PCF Cli Artifact'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

- stage: Publish
  displayName: Publish
  condition: and(succeeded(), eq(dependencies.Build.outputs['BuildPCFPackages.linux.info.shouldPublish'], 'true'))
  dependsOn: Build

  jobs:
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: core
        name: core
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: cli
        name: cli

